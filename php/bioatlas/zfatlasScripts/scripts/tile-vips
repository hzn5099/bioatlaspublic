#!/usr/bin/perl -w

# Started Oct 2012; first version, Apr 2013
# Benchmarks:
# 8m38s original tile script (inc. raw2tiff64)
# 4m28s directly tiling vips

# TODO: write usage() message

use strict;
use POSIX qw(ceil floor);
use Getopt::Std;
use File::Basename;
use Parallel::ForkManager;

BEGIN {
	$SIG{__WARN__} = sub {
		print "[1;31m", @_, "[0m";
	};
}

# user-defineable variables

	my $save_path		= "/tmp/tiles";
	my $tmp_path		= "/tmp/tiles";
	my $untiled_levels	= 2;
	my $max_threads		= 8;
	my $quality			= 80;
	my @tile_size		= (400,300);
	my $unsharp_mask	= '0.5x0.5+1.0+0.03';
	my $default_area	= 72000;

# parse options
# -n		Number of levels to create
# -d		Print debugging info
# -q		Quiet
# -a		Area used in automatically calculating levels
# -Q		JPEG quality (0-100)
# -c		Limit concurrency to c threads

	my %option;
	getopts('dqn:a:c:Q:',\%option);
	my $quiet = $option{q};
	my $debugging = $option{d};
	my $threads = ($option{c} && $option{c} < $max_threads && $option{c} > 0) ? $option{c} : $max_threads;
	$quality = $option{Q} if $option{Q};
	print "Concurrency: $threads\n" if $debugging;

	die "Options -a and -n are mutually exclusive.  Only set one.\n" if $option{a} and $option{n};

# get filename

	die "Filename required.\n" unless @ARGV;
	my $filename = quotemeta $ARGV[0];
	die "$filename: $!\n" unless -e $ARGV[0];

	# (the *_unquoted variation is needed in the place(s) we don't use the shell)
	my ($basename_unquoted) = fileparse($ARGV[0], qr/\.[^.]*/);
	my $basename = quotemeta $basename_unquoted;

# verify save and tmp paths

	-e $save_path or mkdir $save_path or die "Save path ($save_path) does not exist; unable to create it: $!\n";
	-e $tmp_path or mkdir $tmp_path or die "Temporary file path ($tmp_path) does not exist; unable to create it: $!\n";
	-w $save_path or die "Unable to write to save path ($save_path).\n";
	-w $tmp_path or die "Unable to write to temporary file path ($tmp_path).\n";

# get image dimensions

	# open file
	die "Failed to open file: $!\n" unless (open IMAGE, "$ARGV[0]");

	# (we're going to directly read the image dimensions so we don't need /usr/bin/header)
	# read first 12 bytes (magic, width, height)
	read IMAGE, my $header, 12;
	close IMAGE;

	# http://www.vips.ecs.soton.ac.uk/supported/7.32/doc/html/vipsmanual/vipsmanualse2.html
	my ($magic, $width, $height) = unpack("VVV", $header);
	die "This doesn't look like a VIPS file.\n" unless $magic == 0x08f2a6b6;

	my $levels = $option{n} || ceil(log($width * $height / ($option{a} || $default_area)) / log 4) + 1;

	print "width($width) height($height) levels($levels)\n" if $debugging;

# force convert to be single threaded (affects ImageMagick compiled with OpenMP support)

	$ENV{OMP_NUM_THREADS} = 1;

my ($output, $stripe, $last_stripe);
my $level = 0;
my $stripe_size = $tile_size[1] * 2; # this might perform better if dynamically set (based on memory + image width)
my $padding = 8; # number of pixels to leave to avoid edge effects; after unsharp or resize, they are discarded.
                 # padding should be an even integer

my $pm = new Parallel::ForkManager($threads);
{
	my ($completed, $expected) = (0, 1 + get_number_of_processes($stripe_size, $height, 0, $levels - $untiled_levels, 0));
	# could also use this to monitor exit signals for failures (disk full, etc.)
	$pm->run_on_finish(sub { complete(++$completed, $expected) });
}

my $start = time;
while ($level < $levels - $untiled_levels) {
	# level
	printf "[1;32m[%d] --- %d processes[0m\n", $level, ceil($height/$stripe_size) unless $quiet;
	$last_stripe = ceil($height/$stripe_size) - 1;

	last if $last_stripe == 0;

	# stripe
	foreach $stripe (0 .. $last_stripe) {
		# start thread
		$pm->start and next;

		# offset_y = stripe * stripe_size
		my $offset_y = $stripe * $stripe_size;

		# scene = ceil(width/tile_width) * ceil(offset_y/tile_height)
		my $scene_number = ceil($width/$tile_size[0]) * ceil($offset_y/$tile_size[1]);

		# offset_y: offset from top of image to top of stripe
		# stripe_height: height of stripe (padding_top + stripe_size + padding_bottom
		# top of stripe = offset_y - padding_top
		my $padding_top = $stripe == 0 ? 0 : $padding;

		# need to be sure that this never exceeds the height
		# and for the second-to-last stripe, if the final stripe is less than $padding, that could happen
		my $padding_bottom = $stripe == $last_stripe ? 0 : min($padding, $height - ($offset_y + $stripe_size));

		# stripe_height = padding_top + stripe_size + padding_bottom
		my $stripe_height = $padding_top + ($stripe == $last_stripe ? $height % $stripe_size : $stripe_size) + $padding_bottom;

		my $start = 4 * $stripe - ($stripe > 0);
		my $end = floor(4 * ($offset_y - $padding_top + $stripe_height)/$stripe_size);

		my (@input_files, $skip_bytes);

		if ($level == 0) {

			@input_files = ($filename);
			$skip_bytes = 64 + 3 * $width * ($offset_y - $padding_top);

		} else {

			@input_files = map sprintf("%s/%s-%02d-%03d.raw", $tmp_path, $basename, $level, $_), ($start .. $end);
			# verify intermediate source files exist before proceeding
			for (@input_files) {
				sleep 2 until (-e $_);
			}
			$skip_bytes = $stripe == 0 ? 0 : 3 * $width * ($stripe_size/4 - $padding_top);
		}

		# might play with bs/count to optimize performance

		my $command = sprintf "cat @input_files"
							. " | dd status=none iflag=skip_bytes,fullblock skip=%d bs=%d count=%d"
							. " | convert -depth 8 -size %dx%d rgb:- -strip -quality %d -scene %d"
							. " \\( +clone -unsharp %s -crop %dx%d+0+%d +repage -crop %dx%d -write %s/%s,%d,%%04d.jpg -delete 0--1 \\)"
							. " -resize 50%% -crop %dx%d+0+%d +repage rgb:%s/.writing-%s-%02d-%03d.raw",
			# skip bytes
			$skip_bytes,

			# block size
			$width * 3,

			# block count ($stripe_height)
			$stripe_height,

			# -size
			$width,
			$stripe_height,

			$quality,
			$scene_number,
			$unsharp_mask,
			# this step crops away padding used to eliminate edge effects during unsharp masking
			$width, $stripe_size, $padding_top,
			# tile crop
			$tile_size[0], $tile_size[1],
			$save_path,
			$basename,
			$level,
			# this step crops away padding used to eliminate edge effects during resize
			# but image dimensions are 1/2 after resize 50%
			round($width/2), $stripe_size/2, $padding_top/2,
			$tmp_path,
			$basename,
			$level + 1,
			$stripe;

		print "$command\n" if $debugging;
		my $output = `$command`;
		print "$output\n" if $debugging and $output;
		rename sprintf("%s/.writing-%s-%02d-%03d.raw", $tmp_path, $basename, $level + 1, $stripe), sprintf("%s/%s-%02d-%03d.raw", $tmp_path, $basename, $level + 1, $stripe);
		printf "%1\$s/.writing-%2\$s-%3\$02d-%4\$03d.raw -> %s/%s-%02d-%03d.raw\n", $tmp_path, $basename, $level + 1, $stripe if $debugging;

		print "$level $stripe/$last_stripe\n" if $debugging;

		# end child process
		# TODO: return exit code
		$pm->finish;
	}

	$width = round($width/2);
	$height = round($height/2);
	# since the width of the image has halved, double stripe height to keep amount of data input about the same
	$stripe_size *= 2;
	$level++;
}

$pm->wait_all_children;

# what if $basename needs quoting?
my $input_files = $level == 0
	? $filename
	: sprintf "%s/%s-%02d-*.raw", $tmp_path, $basename, $level;

my $command = sprintf "cat %s | dd status=none iflag=skip_bytes,fullblock skip=%d bs=%d count=%d | convert -depth 8 -size %dx%d rgb:- -quality %d",
	$input_files,
	$level == 0 ? 64 : 0,
	$width * 3,
	$height,
	$width, $height,
	$quality;

# single process levels (last_stripe == 0)
# this is going to be wrong if untiled_levels = 0 (or 1?) but untiled_levels should never be < 1

	while ($level < $levels - $untiled_levels) {
			$command .= sprintf " \\( +clone -unsharp %s -crop %dx%d -write %s/%s,%d,%%d.jpg -delete 0--1 \\) -resize 50%%",
				$unsharp_mask,
				@tile_size,
				$save_path,
				$basename,
				$level++;
	}

# thumbnail

	$command .= sprintf " \\( +clone -thumbnail 12500@ -unsharp %s -write %s/%s-preview.jpg +delete \\) -interlace Line", $unsharp_mask, $save_path, $basename;

# untiled levels

	while ($level < $levels - 1) {
		$command .= sprintf " \\( +clone -unsharp %s -write %s/%s,%d,0.jpg +delete \\) -resize 50%%", $unsharp_mask, $save_path, $basename, $level++;
	}

# final level

	$command .= sprintf " -unsharp %s %s/%s,%d,0.jpg", $unsharp_mask, $save_path, $basename, $level;

# re-enable OpenMP

	$ENV{OMP_NUM_THREADS} = $threads;

# run command

	print "$command\n" if $debugging;
	$output = `$command`;
	print "$output\n" if $debugging and $output;
	complete(1,1);

	# remove tmp files
	print "Removing intermediate, temporary files...\n" if $debugging;
	# NOTE: I'm not sure this will work with pathnames w/ spaces
	unless (unlink glob "${tmp_path}/${basename_unquoted}-*-*.raw") {
		print "Failed to unlink files: $!\n" unless $quiet;
	}

	my $end = time;
	printf "Total time: %dm%ds\n", int ($end - $start)/60,($end - $start) % 60 unless $quiet;

exit;
# -----------------------------------------------------------------------------
# Subroutines
# -----------------------------------------------------------------------------
sub min { my ($a, $b) = @_; return $a < $b ? $a : $b }
sub max { my ($a, $b) = @_; return $a > $b ? $a : $b }
sub round { return ($_[0] - int $_[0]) >= 0.5 ? 1 + int $_[0] : int $_[0] }
sub complete {
	my ($completed, $expected) = @_;
	printf "[ %6.2f%% complete ]\n", $completed*100/$expected unless $quiet;
}
# counts number of processes required to process levels
sub get_number_of_processes {
	my ($stripe_size, $height, $level, $max_level, $n) = @_;
	return $level < $max_level
		? get_number_of_processes($stripe_size*2, round($height/2), $level + 1, $max_level, $n + ceil($height/$stripe_size))
		: $n;
}

