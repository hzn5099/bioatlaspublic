#!/bin/bash

# Creates a bootable Gentoo installation USB or image from an ISO

usage()
{
	cat <<-END
	Usage: ${0##*/} [OPTIONS] -i <iso> -u <usb|imagefile> [FILES...]
	    -u <usb>    Required; USB device to use, e.g., /dev/sde, or image to create
	    -i <iso>    Required; ISO file to use, e.g., ~/install-amd64-minimal-20120621.iso
	    -s <size>   Size (in MB) of filesystem to create (smaller will be faster to create);
	                defaults to whole disk.  If creating image, this option is required.
	    -y          Don't ask for confirmation before continuing (potentially DANGEROUS!)
	    -h          Print this help message and exit
	    FILES...    Optional; files can be files or paths and will be recursively copied to USB root
	END
}

cleanup()
{
	# unmount everything
	mountpoint -q "${USB_MOUNT}" && umount -d "${USB_MOUNT}"
	mountpoint -q "${ISO_MOUNT}" && umount -d "${ISO_MOUNT}"

	# remove tmp dirs (only if empty)
	[ -d "${USB_MOUNT}" ] && rm -r "${USB_MOUNT}"
	[ -d "${ISO_MOUNT}" ] && rm -r "${ISO_MOUNT}"
}

die()
{
	echo "${FAILURE}${*}${NORMAL}" >&2
	exit 1
}

cleanup_and_die()
{
	cleanup
	die "$*"
}

inform()
{
	echo "${INFO}${*}${NORMAL}"
}

warn()
{
	echo "${WARN}!!! ${*}${NORMAL}" >&2
}

# Define some ANSI colors for easier visual parsing
	if [ -t 1 ]; then
		FAILURE="[1;31m" # red
		SUCCESS="[1;32m" # green
		INFO="[1;35m" # magenta
		WARN="[1;33m" # yellow
		NORMAL="[0m"
	fi

# Read options

	while getopts ":hvyu:i:s:" opt; do
		case $opt in
			h) usage; exit ;;
			v) VERBOSE="-v" ;;
			y) confirm=yes ;;
			s) SIZE="${OPTARG}" ;;
			u) USB=${OPTARG} ;;
			i) ISO="${OPTARG}" ;;
			:) die "Error: -${OPTARG} requires an argument" ;;
			?) echo "Unknown option -${OPTARG}" >&2 ;;
		esac
	done

	# Remove options from argument list
	shift $((OPTIND - 1))

# Check options

	if [ -z "${USB}" ] || [ -z "${ISO}" ]; then
		usage && die "Missing a required argument"
	elif ! [ -f "${ISO}" ]; then
		die "Error: ${ISO} doesn't exist or is not a file"
	elif ! [ -e /usr/bin/mkdiskimage ] || ! [ -e /usr/bin/syslinux ]; then
		die "Error: couldn't find syslinux files"
	elif ! [ -b "${USB}" ] && [ -z "${SIZE}" ]; then
		die "Error: -s SIZE is required when creating an image"
	elif [ -n "${SIZE}" ] && ! [[ "${SIZE}" =~ ^[0-9]+$ ]]; then
		die "Error: size should be an integer value"
	fi

	if [ -e /usr/bin/file ] && ! file "${ISO}" | grep -q 'ISO 9660 CD-ROM filesystem data'; then
		warn "${ISO} doesn't look like an ISO file"
	fi

	if ! [ -b "${USB}" ] && [ -e "${USB}" ]; then
		warn "${USB} exists and is not a device.  The file will be overwritten!"
	fi

# Print settings and get confirmation before proceeding

	if [ -z "$confirm" ]; then
		cat <<-EOF
		USB device or image file: ${USB}
		ISO image file:           ${ISO}
		Filesystem size:          ${SIZE:-(all)}MB
		EOF
		if [ $# -ne 0 ]; then
			echo "Extra files:"
			du -csh "$@" | column -t | while read; do echo "    $REPLY"; done
		fi
		echo -n "Continue? [type 'yes' to continue] "
		read confirm
		[ "$confirm" = "yes" ] || die "Quitting."
	fi

# Make disk image

	inform "Creating disk image..."
	OFFSET=$(mkdiskimage -4zo ${SIZE:+-M} "${USB}" "${SIZE}")
	[ $? -eq 0 ] || cleanup_and_die "Failed to create disk image"

# Mount newly created FAT filesystem

	inform "Mounting USB..."
	USB_MOUNT=$(mktemp -d)
	LOOPBACK=$(losetup -f)
	mount -o loop="${LOOPBACK}",offset=${OFFSET} "${USB}" "${USB_MOUNT}" || cleanup_and_die "Failed to mount USB"

# Mount ISO

	inform "Mounting ISO..."
	ISO_MOUNT=$(mktemp -d)
	mount -o loop,ro -t iso9660 "${ISO}" "${ISO_MOUNT}" || cleanup_and_die "Failed to mount ISO"

# Copy files

	inform "Copying files to USB..."
	cp -ai $VERBOSE "${ISO_MOUNT}"/. "$@" "${USB_MOUNT}" || cleanup_and_die "Failed to copy files to USB"

# Install syslinux

	inform "Installing syslinux..."
	sed -e "s:cdroot:cdroot slowusb:" "${USB_MOUNT}/isolinux/isolinux.cfg" > "${USB_MOUNT}/isolinux/syslinux.cfg" \
		|| cleanup_and_die "Failed to write syslinux configuraiton file"
	syslinux -d isolinux "${LOOPBACK}" || cleanup_and_die "Failed to install SYSLINUX"

# Clean up

	inform "Cleaning up..."
	cleanup

echo "${SUCCESS}Success.${NORMAL}"
